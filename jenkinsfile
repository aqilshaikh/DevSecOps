pipeline {
    agent any
    tools { 
        maven 'Maven' 
    }
    stages {
        stage ('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                ''' 
            }
        }
	    
	    stage ('Check-Git-Secrets') {
		    steps {
	        sh 'rm trufflehog || true'
		sh 'docker pull gesellix/trufflehog'
		sh 'docker run -t gesellix/trufflehog --json https://github.com/aqilshaikh/webapp.git > trufflehog'
		sh 'cat trufflehog'
		sh 'cd .. && cd ccf-ui/ && docker run --rm -v "$(pwd):/proj" dxa4481/trufflehog file:///proj'

	    }
	    }
	    

	  stage ('Build') {
            steps {
                sh 'mvn clean package'
            }
        }    
	    
	stage ('Source-Composition-Analysis') {
		steps {
		     sh 'rm owasp-* || true'
		     sh 'wget https://raw.githubusercontent.com/aqilshaikh/webapp/master/owasp-dependency-check.sh'	
		     sh 'chmod +x owasp-dependency-check.sh'
		     sh 'bash owasp-dependency-check.sh'
		     sh 'cat /var/lib/jenkins/OWASP-Dependency-Check/reports/dependency-check-report.xml'
		}
	}

	stage ('SAST') {
		steps {
		withSonarQubeEnv('sonar') {
			sh 'mvn sonar:sonar'
			sh 'cat target/sonar/report-task.txt'
		       }
		}
	}
       stage ('Deploy-To-Tomcat') {
            steps {
           sshagent(['tomcat']) {
                sh 'scp -o StrictHostKeyChecking=no target/*.war ubuntu@54.86.226.84:/home/ubuntu/prod/apache-tomcat-8.5.39/webapps/webapp.war'
              }      
           }       
    }
	 
	    stage ('Port Scan') {
		    steps {
			sh 'rm nmap* || true'
			sh 'docker run --rm -v "$(pwd)":/data uzyexe/nmap -sS -sV -oX nmap 54.86.226.84'
			sh 'cat nmap'
		    }
	    }
	    
	    stage ('DAST') {
		  
		    	steps {
			    sshagent(['zap']) {
				    sh 'ssh -o StrictHostKeyChecking=no ubuntu@3.85.77.1 "docker run -t owasp/zap2docker-stable zap-baseline.py -t http://54.86.226.84:8080/webapp/" || true'
			   '
			   sh 'sudo curl --location --request POST http://3.135.238.207:8080/api/v2/import-scan/ --header Authorization: Token 04a3f27e413800d03838d1d5ac9c5dcdb91e672b --form engagement="6" --form verified="true" --form active="true" --form lead="1" --form tags="test" --form scan_date="2019-04-30" --form scan_type="ZAP Scan" --form minimum_severity="Info" --form skip_duplicates="true" --form close_old_findings="false" --form file=@"/home/ubuntu/workspace/Devsecops/zap_report.xml"'

			   }
			}
		}    
		
		stage('ZAP Scan') {
    steps {
        script {
            // Start ZAP container
            sh 'docker run -d -t --name zap -p 8888:8080 owasp/zap2docker-stable'

            // Wait for ZAP to start
            sh 'docker exec zap zap.sh -daemon -host 0.0.0.0 -port 8080'
            sleep 30 // Adjust wait time as needed

            // Run ZAP scan
            sh 'docker exec zap zap.sh -cmd -quickurl 172.16.1.40:8080/WebGoat -quickprogress -quickout zap.xml'

            // Generate ZAP report
            sh 'docker exec zap zap.sh -cmd -report html -file zap-report.html -source zap.xml'

            // Stop and remove ZAP container
            sh 'docker stop zap'
            sh 'docker rm zap'
        }
    }
}

	
	    stage ('Nikto Scan') 
        {
		    steps {
			sh 'rm nikto-output.xml || true'
			sh 'docker pull secfigo/nikto:latest'
			sh 'sudo docker run --user $(id -u):$(id -g) --rm -v $(pwd):/report -i secfigo/nikto:latest -h https:/path/to/url -output /report/nikto-output.xml'
			sh 'cat nikto-output.xml || true'   
		    }
	    }
        
	    
	    stage ('SSL Checks') {
		    steps {
			sh 'pip install sslyze==1.4.2'
			sh 'python -m sslyze --regular 54.86.226.84:8080 --json_out sslyze-output.json'
			sh 'cat sslyze-output.json'
		    }
	    }
	    
	    stage ('Upload Reports to Defect Dojo') {
		    steps {
	 sh '''
         time=$(date +'%Y-%m-%d')
           sudo curl --location --request POST 'http://3.135.238.207:8080/api/v2/import-scan/' \
--header 'Authorization: Token 04a3f27e413800d03838d1d5ac9c5dcdb91e672b' \
--form 'engagement="1"' \
--form 'verified="true"' \
--form 'active="true"' \
--form 'lead="1"' \
--form 'tags="test"' \
--form 'scan_date="2019-04-30"' \
--form 'scan_type="ZAP Scan"' \
--form 'minimum_severity="Info"' \
--form 'skip_duplicates="true"' \
--form 'close_old_findings="false"' \
--form 'file=@"/home/ubuntu/workspace/Devsecops/zap_report.xml"'

'''
			curl -i -F "file=@zap.xml" -H "Authorization: ApiKey jenkins:foo" -F 'scan_type=ZAP Scan' -F 'tags=apicurl' -F 'verified=true' -F 'active=true' -F scan_date=${time} -F 'engagement=/api/v2/engagements/1/' http://127.0.0.1:8000/api/v2/import-scan/
			'''
			sh 'pip install requests'
			sh 'wget https://raw.githubusercontent.com/devopssecure/webapp/master/upload-results.py'
			sh 'chmod +x upload-results.py'
			sh 'python upload-results.py --host 3.81.3.77:80 --api_key 66879c160803596f132aff025fee9a170366f615 --engagement_id 4 --result_file trufflehog --username admin --scanner "SSL Labs Scan"'
			sh 'python upload-results.py --host 3.81.3.77:80 --api_key 66879c160803596f132aff025fee9a170366f615 --engagement_id 4 --result_file /var/lib/jenkins/OWASP-Dependency-Check/reports/dependency-check-report.xml --username admin --scanner "Dependency Check Scan"'
			sh 'python upload-results.py --host 3.81.3.77:80 --api_key 66879c160803596f132aff025fee9a170366f615 --engagement_id 4 --result_file nmap --username admin --scanner "Nmap Scan"'
			sh 'python upload-results.py --host 3.81.3.77:80 --api_key 66879c160803596f132aff025fee9a170366f615 --engagement_id 4 --result_file sslyze-output.json --username admin --scanner "SSL Labs Scan"'
			sh 'python upload-results.py --host 3.81.3.77:80 --api_key 66879c160803596f132aff025fee9a170366f615 --engagement_id 4 --result_file nikto-output.xml --username admin'
			    
		    }
	    }
	    
	
    }
}
